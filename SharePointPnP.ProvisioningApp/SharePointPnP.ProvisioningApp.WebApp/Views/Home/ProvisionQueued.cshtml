@model SharePointPnP.ProvisioningApp.Infrastructure.DomainModel.Provisioning.ProvisioningActionModel
@using SharePointPnP.ProvisioningApp.WebApp.Models

<section class="header-img">
    <div class="header-img-inner"></div>
</section>
<section class="pnp-hero">
    <div class="pnp-hero-inner">
        <div class="pnp-hero-title">
            <h1 class="pnp-hero-head">Provisioning<br>Service</h1>
            <div class="pnp-hero-subtl">
                See the possibilities<br>
                Choose Template &gt; Deploy
            </div>
        </div>
    </div>
</section>

<!-- Inner Content Wrapper -->
<div class="wrapper">
    <div class="wrapper-inner">
        <div class="pnp-form">
            <div class="pnp-svcteaser-inner">
                @(Html.Raw(Model.ProvisionDescription))

                <div>
                    <table>
                        <tr>
                            <th>@Html.LabelFor(m => m.NotificationEmail)</th>
                            <td>@Model.NotificationEmail</td>
                        </tr>
                        @if (Model.PackageProperties != null && Model.PackageProperties.Count > 0)
                        {
                            int i = 0;
                            foreach (var parameter in Model.PackageProperties)
                            {
                                if (Model.MetadataProperties.ContainsKey(parameter.Key))
                                {
                                    <tr>
                                        <th>@Model.MetadataProperties[parameter.Key].Caption</th>
                                        <td>
                                            @if (String.IsNullOrEmpty(Model.MetadataProperties[parameter.Key].Editor))
                                            {
                                                @Model.PackageProperties[parameter.Key]
                                            }
                                            else
                                            {
                                                @Html.Partial($"DisplayTemplates/{Model.MetadataProperties[parameter.Key].Editor}", new TemplateParameterModel { Index = i, ParameterKey = parameter.Key, ParameterValue = parameter.Value, MetadataProperty = Model.MetadataProperties[parameter.Key], SPORootSiteUrl = Model.SPORootSiteUrl })
                                            }
                                        </td>
                                    </tr>
                                }
                            }

                            i++;
                        }
                        @if (Model.UserIsTenantAdmin || Model.UserIsSPOAdmin)
                        {
                            if (Model.ApplyTheme && !Model.ApplyCustomTheme)
                            {
                                <tr>
                                    <th>@Html.LabelFor(m => m.ApplyTheme)</th>
                                    <td>@Model.ApplyTheme</td>
                                </tr>
                                <tr>
                                    <th>@Html.LabelFor(m => m.SelectedTheme)</th>
                                    <td>@Model.SelectedTheme</td>
                                </tr>
                            }
                            else if (Model.ApplyTheme && Model.ApplyCustomTheme)
                            {
                                <tr>
                                    <th>@Html.LabelFor(m => m.ApplyCustomTheme)</th>
                                    <td>@Model.ApplyCustomTheme</td>
                                </tr>
                                <tr>
                                    <th>@Html.LabelFor(m => m.ThemePrimaryColor)</th>
                                    <td>
                                        <span class="pnp-colorpreview" style="background-color: @Model.ThemePrimaryColor;"></span>
                                        @Model.ThemePrimaryColor
                                    </td>
                                </tr>
                                <tr>
                                    <th>@Html.LabelFor(m => m.ThemeBodyTextColor)</th>
                                    <td>
                                        <span class="pnp-colorpreview" style="background-color: @Model.ThemeBodyTextColor;"></span>
                                        @Model.ThemeBodyTextColor
                                    </td>
                                </tr>
                                <tr>
                                    <th>@Html.LabelFor(m => m.ThemeBodyBackgroundColor)</th>
                                    <td>
                                        <span class="pnp-colorpreview" style="background-color: @Model.ThemeBodyBackgroundColor;"></span>
                                        @Model.ThemeBodyBackgroundColor
                                    </td>
                                </tr>
                            }
                        }
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <!-- build:js scripts/main.js -->
    <script src="/app/scripts/main.js"></script>
    <!-- endbuild -->

    <script>

        document.addEventListener('DOMContentLoaded', function () {

            // allow the body to be shorter than usual
            var bodyElements = document.getElementsByTagName("body");
            if (bodyElements && bodyElements.length == 1 &&
                !bodyElements[0].classList.contains("body-short")) {
                bodyElements[0].classList.add("body-short");
            }

            // allow the wrapper-inner to be shorter than usual
            var wrapperElements = document.getElementsByClassName("wrapper-inner");
            if (wrapperElements && wrapperElements.length == 1 &&
                !wrapperElements[0].classList.contains("wrapper-inner-short")) {
                wrapperElements[0].classList.add("wrapper-inner-short");
            }
        });

    </script>
}